#!/usr/bin/env node
var fs = require('fs');
var json2csv = require('json2csv');

var argv = require('yargs')
	.option('p', {
		alias : 'path',
		demand: true,
		describe: 'please specify a path',
		type: 'string'
	})
	.option('f', {
		alias : 'file',
		demand: false,
		describe: 'please specify a file',
		type: 'string'
	})
	.argv;

var untranslatedString = [];
var untranslatedStringToCsv = [];

var csvFields = ['stringID', 'BR', 'CN', 'CZ', 'DA', 'DE', 'ES', 'FI', 'FR', 'HU', 'IT', 'JP', 
	'KR', 'MS', 'NO', 'PL', 'RO', 'RU', 'SV', 'TH', 'TR', 'TW', 'UK', 'SL', 'NL'];

var Languages = function(){
	this.stringID = '';
	this.BR = '--';
	this.CN = '--';
	this.CZ = '--';
	this.DA = '--';
	this.DE = '--';
	this.ES = '--';
	this.FI = '--';
	this.FR = '--';
	this.HU = '--';
	this.IT = '--';
	this.JP = '--';
	this.KR = '--';
	this.MS = '--';
	this.NO = '--';
	this.NL = '--';
	this.PL = '--';
	this.RO = '--';
	this.RU = '--';
	this.SL = '--';
	this.SV = '--';
	this.TH = '--';
	this.TR = '--';
	this.TW = '--';
	this.UK = '--';
}

var differ = function(fileName){
	if(fileName.indexOf('EN') !== -1) return false;

	fs.readFile(argv.p + fileName, 'utf8', (err, targetData) => {
		var curLang = fileName.split('.')[0];

		fs.readFile(argv.p + "EN.dict", 'utf8', (err, goldenData) => {
			targetData.split(/\r?\n/).map((line) => {
				if(goldenData.indexOf(line) !== -1){
					var strId = line.split('=')[0];

					if(untranslatedString.indexOf(strId) == -1){
						untranslatedString.push(strId);
						untranslatedString[strId] = new Languages();
						untranslatedString[strId].stringID = strId;
					}

					untranslatedString[strId][curLang] = line.replace(strId + '=', '');
				}
			});

			untranslatedStringToCsv = [];
			untranslatedString
				.filter((strId) => {
					return (
						strId.indexOf('TZ') === -1 && 
						strId.indexOf('Yandex') === -1 && 
						strId.indexOf('WLANConfig11b') === -1 && 
						strId.indexOf('CTL_ok') === -1 && 
						strId.indexOf('CHAR_set') === -1 && 
						strId.indexOf('menu5') === -1 && 
						strId !== ''
					)
				})
				.map((stringID) => {
					untranslatedStringToCsv.push(untranslatedString[stringID])
				})

			var csv = json2csv({ data: untranslatedStringToCsv, fields: csvFields });
			fs.writeFile('./untranslated_strings.csv', csv, function(err) {});
		});
	});
}

if(!argv.f){
	fs.readdir(argv.p, (err, files) => {
		files.forEach(differ);
	});
}
else{
	differ(argv.f);
}